import java.lang.reflect.*;

public class Main {
    public static void main(String[] args) {
       Class<Simple> clazz = Simple.class;

        String className = clazz.getSimpleName();
        System.out.println("Class name: " + className);
        String superClassName = clazz.getSuperclass().getName();
        System.out.println("Super class: " + superClassName);
        Class [] interfices = clazz.getInterfaces();
        for (Class inter : interfices ){
            System.out.println(inter.getSimpleName());
        }
        Class [] classes = clazz.getClasses();
        for (Class innerClassName : classes ){
            System.out.println(innerClassName.getName());
        }

        System.out.println("Methods:");

        Method[] methods = clazz.getDeclaredMethods();
        for (Method method: methods){
         System.out.print(method.getName());
         System.out.println(" " + Modifier.toString(method.getModifiers()));
        }
        int countMethods = methods.length;
        System.out.println("Total:" + countMethods);
        System.out.println("Fields:");
        Field[] fields = clazz.getDeclaredFields();
        for (Field field: fields){
            System.out.print(field.getName());
            System.out.println(" " + Modifier.toString(field.getModifiers()));
        }
        int countFields = fields.length;
        System.out.println("Total: " + countFields);


    }

    static class Simple{
        private  String name;
        public  int number;
        protected  boolean isExist;


        public Simple(String name, int number, boolean isExist) {
            this.name = name;
            this.number = number;
            this.isExist = isExist;
        }

        public void go(){

        }

        private void set() {

        }
        interface First{

        }
        class Second{

        }


    }
}

